#ip 1
addi 1 16 1  #0  jmp +16  0+ 16 = 16 + 1 = 17
seti 1 4 2   #1  set reg 2 to 1
seti 1 0 3   #2  set reg 3 to 1
mulr 2 3 4   #3  multiply reg 2 and reg 3 and store in 4 // set reg 4 to 1
eqrr 4 5 4   #4  if reg 4 == reg 5 --> store 1 in reg 4 else store 0 in reg 4
addr 4 1 1   #5  jmp reg4 // skip next if reg 4 == reg 5
addi 1 1 1   #6  jmp +1 //skip next operation
addr 2 0 0   #7  add reg 2 to reg 0
addi 3 1 3   #8  add to reg3, reg3++
gtrr 3 5 4   #9  if reg 3 > reg 5 --> store 1 in reg 4 else store 0 in reg 4
addr 1 4 1   #10 jmp reg4 // skip next if reg 3 > reg 5
seti 2 4 1   #11 jmp to #3
addi 2 1 2   #12 add 2 to reg 2
gtrr 2 5 4   #13 if reg 2 > reg 5 --> store 1 in reg 4 else store 0 in reg 4
addr 4 1 1   #14 jmp reg4 // skip next if reg 3 > reg 5
seti 1 1 1   #15 jmp to #2
mulr 1 1 1   #16 multiply reg1 with itself, so jmp to #33
addi 5 2 5   #17 add 2 to reg 5 // starts at 0, so 2
mulr 5 5 5   #18 multiply reg 5 with itself, so reg 5 ^ 2 // 4
mulr 1 5 5   #19 multiply reg 5 with reg 1, so reg 5 * 19 // 76
muli 5 11 5  #20 multiply reg 5 with 11 // 836
addi 4 2 4   #21 add 2 to reg 4 // starts at 0, so 2
mulr 4 1 4   #22 multiply reg 4 with reg 1, so reg 2 * 22 //44
addi 4 16 4  #23 add 16 to reg 4 // 60
addr 5 4 5   #24 add reg 5 to reg 4 // 896
addr 1 0 1   #25 add reg 0 to reg 1 // will eventually break out
seti 0 7 1   #26 jmp to #0 // always skipped, since 0 starts at 1.
setr 1 5 4   #27 set reg 4 to reg 1, 4 = 27
mulr 4 1 4   #28 multiply reg 4 with reg 1, 27 * 28 //756
addr 1 4 4   #29 add reg 1 to reg 4, (27 * 28) + 29 //785
mulr 1 4 4   #30 multiply reg 1 and reg 4, ((27 * 28) + 29) * 30 //23550
muli 4 14 4  #31 multiply reg 4 and 14, (((27 * 28) + 29) * 30 * 14) //329700
mulr 4 1 4   #32 multiply reg 4 and reg 1, ((((27 * 28) + 29) * 30) * 14) * 32 //10550400
addr 5 4 5   #33 add reg 4 to reg 5 // 10551296
seti 0 9 0   #34 set register 0 to 0
seti 0 4 1   #35 jmp to #0
